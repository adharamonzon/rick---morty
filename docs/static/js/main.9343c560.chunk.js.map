{"version":3,"sources":["service/api.js","components/ItemList.js","components/List.js","components/FIlterByName.js","components/App.js","serviceWorker.js","index.js","stylesheets/images/rickandmorty.png"],"names":["getDataFromApi","fetch","then","response","json","data","results","map","character","id","name","species","image","ItemList","props","console","log","className","info","src","alt","List","characters","items","item","key","propTypes","PropTypes","array","FilterByName","type","placeholder","onChange","ev","target","value","handleFilter","App","state","bind","setState","this","Logo","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"+RAeeA,EAfQ,WACrB,OAAOC,MAAM,8CACVC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,OAAOA,EAAKC,QAAQC,KAAI,SAACC,GACvB,MAAO,CACLC,GAAID,EAAUC,GACdC,KAAMF,EAAUE,KAChBC,QAASH,EAAUG,QACnBC,MAAOJ,EAAUI,cCOZC,EAbE,SAACC,GAGhB,OAFAC,QAAQC,IAAIF,GAGV,oCACE,yBAAKG,UAAU,kBACb,wBAAIA,UAAU,SAASH,EAAMI,KAAKR,MAClC,wBAAIO,UAAU,WAAWH,EAAMI,KAAKP,UAEtC,yBAAKM,UAAU,MAAME,IAAKL,EAAMI,KAAKN,MAAOQ,IAAG,kBAAaN,EAAMI,KAAKR,U,gBCG9DW,EAXF,SAACP,GACZC,QAAQC,IAAIF,EAAMI,KAAKI,YACvB,IAAMC,EAAQT,EAAMI,KAAKI,WAAWf,KAAI,SAACiB,GACvC,OACE,wBAAIP,UAAU,WAAWQ,IAAKD,EAAKf,IACjC,kBAAC,EAAD,CAAUS,KAAMM,QAItB,OAAO,wBAAIP,UAAU,QAAQM,IAI/BV,EAASa,UAAY,CACnBR,KAAMS,IAAUC,O,oBCNHC,EATM,SAACf,GAMpB,OAAO,2BAAOgB,KAAK,OAAOC,YAAY,8BAA8BC,SAL/C,SAACC,GACpBlB,QAAQC,IAAIiB,EAAGC,OAAOC,OACtBrB,EAAMsB,aAAaH,EAAGC,OAAOC,WCyClBE,G,wDAvCb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IACDwB,MAAQ,CACXhB,WAAY,IAEd,EAAKtB,eAAiB,EAAKA,eAAeuC,KAApB,gBACtB,EAAKH,aAAe,EAAKA,aAAaG,KAAlB,gBANH,E,6DAUD,IAAD,OACfvC,IAAiBE,MAAK,SAACG,GACrB,EAAKmC,SAAS,CACZlB,WAAYjB,S,0CAKhBoC,KAAKzC,mB,mCAIMK,GACXU,QAAQC,IAAI,MAAOX,K,+BAMnB,OAFAU,QAAQC,IAAIyB,KAAKH,OAGf,6BACE,yBAAKrB,UAAU,OAAOE,IAAKuB,IAAMtB,IAAI,wBACrC,kBAAC,EAAD,CAAcgB,aAAcK,KAAKL,eACjC,kBAAC,EAAD,CAAMlB,KAAMuB,KAAKH,a,GAlCPK,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,oCACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,2C","file":"static/js/main.9343c560.chunk.js","sourcesContent":["const getDataFromApi = () => {\r\n  return fetch('https://rickandmortyapi.com/api/character/')\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data.results.map((character) => {\r\n        return {\r\n          id: character.id,\r\n          name: character.name,\r\n          species: character.species,\r\n          image: character.image,\r\n        };\r\n      });\r\n    });\r\n};\r\n\r\nexport default getDataFromApi;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ItemList = (props) => {\r\n  console.log(props);\r\n\r\n  return (\r\n    <>\r\n      <div className='text-container'>\r\n        <h1 className='title'>{props.info.name}</h1>\r\n        <h3 className='espices'>{props.info.species}</h3>\r\n      </div>\r\n      <img className='img' src={props.info.image} alt={`foto de ${props.info.name}`} />\r\n    </>\r\n  );\r\n};\r\nexport default ItemList;\r\n\r\nItemList.propTypes = {\r\n  name: PropTypes.string,\r\n  species: PropTypes.string,\r\n  image: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport ItemList from './ItemList';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst List = (props) => {\r\n  console.log(props.info.characters);\r\n  const items = props.info.characters.map((item) => {\r\n    return (\r\n      <li className='itemList' key={item.id}>\r\n        <ItemList info={item} />\r\n      </li>\r\n    );\r\n  });\r\n  return <ul className='list'>{items}</ul>;\r\n};\r\nexport default List;\r\n\r\nItemList.propTypes = {\r\n  info: PropTypes.array,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FilterByName = (props) => {\r\n  const handleFilter = (ev) => {\r\n    console.log(ev.target.value);\r\n    props.handleFilter(ev.target.value);\r\n  };\r\n\r\n  return <input type='text' placeholder='busca tu personaje favorito' onChange={handleFilter} />;\r\n};\r\n\r\nexport default FilterByName;\r\n\r\nFilterByName.propTypes = {\r\n  handleFilter: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport getDataFromApi from '../service/api';\r\nimport List from './List';\r\nimport Logo from '../stylesheets/images/rickandmorty.png';\r\nimport FilterByName from './FIlterByName';\r\nimport '../stylesheets/App.scss';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      characters: [],\r\n    };\r\n    this.getDataFromApi = this.getDataFromApi.bind(this);\r\n    this.handleFilter = this.handleFilter.bind(this);\r\n  }\r\n\r\n  //traer los datos de la api\r\n  getDataFromApi() {\r\n    getDataFromApi().then((data) => {\r\n      this.setState({\r\n        characters: data,\r\n      });\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.getDataFromApi();\r\n  }\r\n\r\n  //manejar el filtro\r\n  handleFilter(data) {\r\n    console.log('app', data);\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state);\r\n\r\n    return (\r\n      <div>\r\n        <img className='logo' src={Logo} alt='rick and morty logo' />\r\n        <FilterByName handleFilter={this.handleFilter} />\r\n        <List info={this.state} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './stylesheets/index.scss';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/rickandmorty.15c5ace1.png\";"],"sourceRoot":""}