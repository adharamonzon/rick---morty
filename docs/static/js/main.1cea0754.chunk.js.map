{"version":3,"sources":["stylesheets/images/rickandmorty.png","service/api.js","components/CharacterCard.js","components/CharacterList.js","components/CharacterDetail.js","components/FIlterByName.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","getDataFromApi","fetch","then","response","json","data","results","map","character","id","name","species","image","origin","status","episodes","episode","CharacterCard","props","console","log","to","className","src","alt","CharacterList","items","characters","item","key","CharacterDetail","selectedCharacter","FilterByName","type","placeholder","onChange","ev","target","value","handleFilter","App","state","nameFilter","bind","filteredCharacters","renderCharacterDetail","setState","this","filter","toUpperCase","includes","toLocaleUpperCase","find","parseInt","match","params","Logo","exact","path","render","React","Component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1cea0754.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rickandmorty.15c5ace1.png\";","const getDataFromApi = () => {\r\n  return fetch('https://rickandmortyapi.com/api/character/')\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data.results.map((character) => {\r\n        return {\r\n          id: character.id,\r\n          name: character.name,\r\n          species: character.species,\r\n          image: character.image,\r\n          origin: character.origin.name,\r\n          status: character.status,\r\n          episodes: character.episode,\r\n        };\r\n      });\r\n    });\r\n};\r\n\r\nexport default getDataFromApi;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CharacterCard = (props) => {\r\n  console.log(props);\r\n\r\n  return (\r\n    <div>\r\n      <Link to={`/character/${props.character.id}`}>\r\n        <img className='img' src={props.character.image} alt={`foto de ${props.character.name}`} />\r\n        <div className='text-container'>\r\n          <h1 className='title'>{props.character.name}</h1>\r\n          <h3 className='espices'>{props.character.species}</h3>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\nexport default CharacterCard;\r\n\r\nCharacterCard.propTypes = {\r\n  character: PropTypes.object,\r\n};\r\n","import React from 'react';\r\nimport CharacterCard from './CharacterCard';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CharacterList = (props) => {\r\n  const items = props.characters.map((item) => {\r\n    return (\r\n      <li className='itemList' key={item.id}>\r\n        <CharacterCard character={item} />\r\n      </li>\r\n    );\r\n  });\r\n  return <ul className='list'>{items}</ul>;\r\n};\r\nexport default CharacterList;\r\n\r\nCharacterList.propTypes = {\r\n  characters: PropTypes.array,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CharacterDetail = (props) => {\r\n  console.log(props.selectedCharacter);\r\n  debugger;\r\n\r\n  return (\r\n    <div>\r\n      <img className='img' src={props.selectedCharacter.image} alt={`foto de ${props.selectedCharacter.name}`} />\r\n      <div className='text-container'>\r\n        <h3 className='espices'>Especie:{props.selectedCharacter.species}</h3>\r\n        <p>origen: {props.selectedCharacter.origin} </p>\r\n        <p>Estado: {props.selectedCharacter.status} </p>\r\n        <p>episodios: {props.selectedCharacter.episodes}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CharacterDetail;\r\n\r\nCharacterDetail.propTypes = {\r\n  character: PropTypes.object,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FilterByName = (props) => {\r\n  const handleFilter = (ev) => {\r\n    console.log(ev.target.value);\r\n    props.handleFilter({\r\n      value: ev.target.value,\r\n    });\r\n  };\r\n\r\n  return <input type='text' name='name' id='name' placeholder='busca tu personaje favorito' onChange={handleFilter} />;\r\n};\r\n\r\nexport default FilterByName;\r\n\r\nFilterByName.propTypes = {\r\n  handleFilter: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Logo from '../stylesheets/images/rickandmorty.png';\r\nimport getDataFromApi from '../service/api';\r\nimport CharacterList from './CharacterList';\r\nimport CharacterDetail from './CharacterDetail';\r\nimport FilterByName from './FIlterByName';\r\nimport '../stylesheets/App.scss';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      characters: [],\r\n      nameFilter: '',\r\n    };\r\n    this.getDataFromApi = this.getDataFromApi.bind(this);\r\n    this.handleFilter = this.handleFilter.bind(this);\r\n    this.filteredCharacters = this.filteredCharacters.bind(this);\r\n    this.renderCharacterDetail = this.renderCharacterDetail.bind(this);\r\n  }\r\n\r\n  //traer los datos de la api\r\n  getDataFromApi() {\r\n    getDataFromApi().then((data) => {\r\n      this.setState({\r\n        characters: data,\r\n      });\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.getDataFromApi();\r\n  }\r\n\r\n  //manejar el filtro\r\n  handleFilter(data) {\r\n    this.setState({ nameFilter: data.value });\r\n  }\r\n\r\n  filteredCharacters() {\r\n    return this.state.characters.filter((character) => {\r\n      return character.name.toUpperCase().includes(this.state.nameFilter.toLocaleUpperCase());\r\n    });\r\n  }\r\n\r\n  renderCharacterDetail(props) {\r\n    console.log(this.state);\r\n\r\n    debugger;\r\n    let selectedCharacter = this.state.characters.find((character) => {\r\n      return character.id === parseInt(props.match.params.id);\r\n    });\r\n    console.log(selectedCharacter);\r\n    return <CharacterDetail selectedCharacter={selectedCharacter} />;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img className='logo' src={Logo} alt='rick and morty logo' />\r\n\r\n        <Switch>\r\n          <Route exact path='/'>\r\n            <FilterByName handleFilter={this.handleFilter} />\r\n            <CharacterList characters={this.filteredCharacters()} />\r\n          </Route>\r\n          <Route path='/character/:id' render={this.renderCharacterDetail} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './stylesheets/index.scss';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}